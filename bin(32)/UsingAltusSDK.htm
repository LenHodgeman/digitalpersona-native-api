<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html>
<head>
<title>Altus SDK Samples</title>
<style type="text/css">
    body{
        font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
        font-size: 14px;
        color: #333333;
    }
    input[type="radio"],input[type="text"]{
        height:20px;
        padding:5px;
        display: inline-block;
        font-size: 14px;
        vertical-align: middle;
    }
    input[type="text"] {
        box-shadow: none;
        border-radius: 4px;
        background-color: #ffffff;
        border-color: #cccccc;
        border-width: 1px;
        outline:#cccccc;
        color: #696969;
    }
    input[type="text"]:focus{
        outline: none;
        box-shadow: inset 0 3px 7px rgba(0, 0, 0, 0.08);
        color: #333333;
    }
    button {
        display: inline-block;
        padding: 4px 8px;
        margin-bottom: 0;
        font-size: 14px;
        font-weight: normal;
        line-height: 1.428571429;
        text-align: center;
        white-space: nowrap;
        vertical-align: middle;
        cursor: pointer;
        border-radius: 4px;
        color: #ffffff;
        background-color: #428bca;
        border: 1px solid #357ebd;
    }
    button:focus {
        outline: none;
    }
    button:active {
        background-image: none;
        outline: 0;
        box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
    }
    .container{
        width:800px;
        padding: 10px;
        margin: 0 auto;
    }

    .samples {
        padding-top: 20px;
        border-bottom: #e8e8e8 1px solid;
    }
    .samples:last-child {
        border-bottom: none;
    }
    .samples h2{
        margin: 0px 0px 0px 10px;
        font-size: 16px;
        font-variant: small-caps;
        color: #428bca;
    }
    .samples h3{
        margin: 5px 5px 10px 5px;
        font-size: 14px;
        color: #474747;
    }
    .samples button{
        margin: 5px;
        display: block;
    }
    .sample-inputs{
        width: 100%;
    }
    .sample-inputs:before,
    .sample-inputs:after {
        display: table;
        content: " ";
    }
    .sample-inputs:after {
        clear: both;
    }
    .sample-input{
        padding: 5px;
        float: left;
    }
    .sample-input input[type="text"]{
        padding: 5px;
        margin: 0 0 5px 0;
        width: 350px;
    }
    .sample-input label{
        color: #4f4f4f;
        display: block;
        font-weight: bold;
        font-size: 13px;
        margin-bottom: 3px;
    }
    .sample{
        width: 100%;
        display: block;
        margin: 7px 0;
        padding: 10px;
        border-bottom: 2px solid #e8e8e8;
    }

</style>

<script type="text/javascript">
    (function () {
        if (document.querySelectorAll && document.querySelector) {
            return;
        }

        var style = document.createStyleSheet(),
            select = function (selector, maxCount) {
                var all = document.all,
                    l = all.length,
                    i,
                    resultSet = [];

                style.addRule(selector, "foo:bar");
                for (i = 0; i < l; i += 1) {
                    if (all[i].currentStyle.foo === "bar") {
                        resultSet.push(all[i]);
                        if (resultSet.length > maxCount) {
                            break;
                        }
                    }
                }
                style.removeRule(0);
                return resultSet;

            };

        document.querySelectorAll = function (selector) {
            return select(selector, Infinity);
        };
        document.querySelector = function (selector) {
            return select(selector, 1)[0] || null;
        };
    }());
</script>

<script type="text/javascript">
    var DP = {
        SdkAuthentication: 'DPVerifyIdentity.AltusSDK.AuthenticationDialogJS',
        SdkIdentification: 'DPVerifyIdentity.AltusSDK.IdentificationDialogJS',
        Credentials: {
            Password: 1,        // Password
            Fingerprint: 2,     // Fingerprint
            Smartcard: 4,       // Smart Card
            Face: 16,           // Face
            Contactless: 32,    // Contactless Card
            Pin: 128,           // PIN (auxiliary token)
            Proximity: 256,     // Proximity Card (auxiliary token)
            Bluetooth: 512      // Bluetooth (auxiliary token)
        }
    }

    function selectedRadio(name) {
        return document.querySelector('input[name="' + name + '"]:checked').value;
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // These functions return name & value of our hypothethic secret
    function SecretName() { return "TopSecret"; }
    function SecretValue() { return "123"; }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Authentication samples                                                                                          //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This example demonstrates the simplest possible call to authenticate the currently logged on user.
    // The authentication is done with the authentication policy configured by the administrator.
    // No secrets are released, no strings are customized in the dialog and no mask of verified credentials
    //is returned.
    function SimpleAuthenticateCurrentlyLoggedOnUser() {
        try {
            var obj = new ActiveXObject(DP.SdkAuthentication);

            if (obj.ShowDialog())
                alert("Authentication succeeded.");
            else
                alert("Authentication was cancelled by the user.");
        }
        catch (e) {
            // In case of an error, display the error message.
            alert(e.description || e.message);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This function demonstrates how to visualize authentication credential indexes.
    //
    // Please see the implementation of the following methods that visualize authentication
    // credentials using this function:
    //      AuthenticateUserProvidingParameters()
    //      AuthenticationPolicyToString()
    //      AuthenticateCurrentlyLoggedOnUserWithApplicationProvidedAuthenticationPolicy()
    function AuthenticatedCredentialsToString(AuthCreds) {
        var splitMask = function (mask) {
            var items = [],
                i = 1;

            while (i <= mask) {
                if ((i & mask) == i)
                    items.push(i);

                i = i + 1;
            }

            return items;
        }

        var creds = splitMask(AuthCreds);

        var s = "\rCredentials: ";
        for (var i = 0; i < creds.length; i++) {
            var cred = creds[i];
            if (cred == DP.Credentials.Password)
                s += " Password";
            else if (cred == DP.Credentials.Fingerprint)
                s += " Fingerprint";
            else if (cred == DP.Credentials.Smartcard)
                s += " Smartcard";
            else if (cred == DP.Credentials.Face)
                s += " Face";
            else if (cred == DP.Credentials.Contactless)
                s += " Contactless card";
            else if (cred == DP.Credentials.Pin)
                s += " Pin";
            else if (cred == DP.Credentials.Proximity)
                s += " Proximity card";
            else if (cred == DP.Credentials.Bluetooth)
                s += " Bluetooth";
            /* else
                 s += " (Unknown credential: " + cred.toString() + ")";*/
        }

        return s;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This example demonstrates user authentication.  We provide the username, specify the caption and
    // text in the authentication dialog and receive the mask of authenticated credentials.
    // The standard authentication policy configured by the administrator is used, and no user secret is released.

    function AuthenticateUserProvidingParameters(title, description) {
        try {
            var obj = new ActiveXObject(DP.SdkAuthentication);

            obj.Title = title;
            obj.Description = description

            if (obj.ShowDialog()) {
                var AuthenticatedCredentials = obj.AuthenticatedCredentials;
                alert("Authentication succeeded. \r" + AuthenticatedCredentialsToString(AuthenticatedCredentials));
            }
            else {
                alert("Authentication was cancelled by the user.");
            }
        }
        catch (e) {
            alert(e.description || e.message);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This example demonstrates authentication of the currently logged on user.
    // We specify the caption and text for the authentication dialog and receive back the mask of
    // verified credentials.
    // The standard authentication policy, configured by the administrator, is used.
    // After the user is authenticated, the user secret is released and returned to the application.
    function GetSecretOfCurrentlyLoggedOnUser(secretName) {
        try {
            var obj = new ActiveXObject(DP.SdkAuthentication);

            obj.Title = "Altus SDK Sample";
            obj.Description = "Authenticate currently logged on user and get a secret for that user after authentication.";

            secretName = secretName || SecretName();

            var SecretValue = obj.ShowDialogReadSecret(secretName);
            if (SecretValue) {
                var AuthenticatedCredentials = obj.AuthenticatedCredentials;
                alert("Authentication succeeded. \r" + secretName + " = " + SecretValue +
                        AuthenticatedCredentialsToString(AuthenticatedCredentials));
            }
        }
        catch (e) {
            alert(e.description || e.message);
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Identification samples                                                                                         //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This example demonstrates the simplest possible call to DPProIdentAuthenticate.
    // Authentication is done with the authentication policy configured by the administrator.
    // No secrets are released, no strings are provided to the identification dialog and no mask of verified credentials is returned.
    // By default, the identification dialog shows the username of the currently logged on user.
    // The name of the identified and authenticated user is returned to the application.
    function IdentifyUserUsingCurrentlyLoggedOnUserAsDefault() {
        try {
            var obj = new ActiveXObject(DP.SdkIdentification);

            if (obj.ShowDialog())
                alert("Identification and authentication succeeded.\rUser: " + obj.UserName);
            else
                alert("Authentication was cancelled by the user.");
        }
        catch (e) {
            alert(e.description || e.message);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This example demonstrates identification of a user. The name of the default user is provided to the dialog.
    // Identification is done in accordance with the authentication policy configured by the administrator.
    // No secrets are released, no strings are provided to the identification dialog.
    // The identification dialog shows the default user name specified. This name does not have to be of an existing user,
    // it is treated simply as a string and the user can change it.
    // The name of the identified and authenticated user and mask of verified credentials is returned to the application.
    function IdentifyUserProvidingDefaultUserName(userName, userType) {
        try {
            var obj = new ActiveXObject(DP.SdkIdentification);

            obj.UserName = userName || "SomeDefaultUser";
            obj.UserNameType = userType || 3;

            if (obj.ShowDialog())
                alert("Identification and authentication succeeded.\rUser: " + obj.UserName +
                        AuthenticatedCredentialsToString(obj.AuthenticatedCredentials));
            else
                alert("Authentication was cancelled by the user.");
        }
        catch (e) {
            alert(e.description || e.message);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This example demonstrates identification of a user, returning the specified user secret.
    // The identification is done in accordance with the authentication policy configured by the administrator.
    // No secrets are released, no strings are provided to the identification dialog.
    // By default, the identification dialog shows the username provided. This name does not have to be of an existing user,
    // it is treated simply as a string and user can change it.
    // The name of the identified and authenticated user and mask of verified credentials is returned.
    function IdentifyUserAndGetUsersSecret(secretName) {
        try {
            var obj = new ActiveXObject(DP.SdkIdentification);

            obj.Title = "Altus SDK Sample";
            obj.Description = "Identifying user and getting a secret out.";

            secretName = secretName || SecretName();

            var SecretValue = obj.ShowDialogReadSecret(secretName);
            if (SecretValue) {
                alert("Identification and authentication succeeded.\r\nUser: " + obj.UserName + "\r" +
                       secretName + " = " + SecretValue + AuthenticatedCredentialsToString(obj.AuthenticatedCredentials));
            }
        }
        catch (e) {
            alert(e.description || e.message);
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Working with Secrets samples                                                                                    //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This example demonstrates writing a secret for the currently logged on user after authenticating the user
    // according to the current authentication policy. We specify the caption and prompt text for the
    // authentication dialog and receive the mask of verified credentials.
    //
    // The secret here is created from a string, but in practice it can be any BLOB.
    function WriteSecretForCurrentlyLoggedOnUser(secretName, secretValue) {
        try {
            var obj = new ActiveXObject(DP.SdkIdentification);

            obj.Title = "Altus SDK Sample";
            obj.Description = "Writing a secret for currently logged on user.";

            secretName = secretName || SecretName();
            secretValue = secretValue || SecretValue();

            if (obj.ShowDialogWriteSecret(secretName, secretValue)) {
                alert("Writing secret succeeded: " + secretName + " = " + secretValue +
                        AuthenticatedCredentialsToString(obj.AuthenticatedCredentials));
            }
        }
        catch (e) {
            alert(e.description || e.message);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This example checks for the existence of a secret in the record of the specified user.
    // The user must be an Altus user, otherwise the secret will not be found.
    // The username must be provided in UPN or SAM formats.
    function DoesSecretExist(secretName) {
        try {
            var obj = new ActiveXObject(DP.SdkAuthentication);

            secretName = secretName || SecretName();

            if (obj.SecretExists(secretName))
                alert("Secret with name '" + secretName + "'does exist.");
            else
                alert("Secret with name '" + secretName + "'does not exist.");
        }
        catch (e) {
            alert(e.description || e.message);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This example demonstrates deleting a secret for the currently logged on user after authenticating the user
    // according to the current authentication policy. We provide caption and prompt text to the
    // authentication dialog and receive the mask of verified credentials.
    function DeleteSecretForCurrentlyLoggedOnUser(secretName) {
        try {
            var obj = new ActiveXObject(DP.SdkAuthentication);

            obj.Title = "Altus SDK Sample";
            obj.Description = "Deleting a secret for currently logged on user.";

            secretName = secretName || SecretName();

            if (obj.ShowDialogWriteSecret(secretName, null)) {
                alert("Deleting secret succeeded.");
            }
        }
        catch (e) {
            alert(e.description || e.message);
        }
    }

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Custom Authentication Policies (Advanced Users Only)                                                            //
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // See the Developer Guide for more information on custom authentication policies.
    //

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This function demonstrates how to visualize authentication policies.
    //
    // Please see the implementation of the following methods that visualize authentication policy
    // using this function:
    //      ShowUserAuthenticationPolicy()
    function AuthenticationPolicyToString(Policy) {
        var s = '\rAuthentication Policy: ';
        for (var i = 0; i < Policy.Count; i++) {
            var policyItem = Policy.GetByIndex(i);
            s += "\r\rPolicy Element(" + i.toString() + ")";
            s += AuthenticatedCredentialsToString(policyItem)
        }
        return s;
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This example displays the current authentication policy configured by an administrator for the
    // currently logged on user. User name can be NULL for the currently logged on user, but if
    // provided, the user name must be in UPN or SAM formats.
    function ShowUserAuthenticationPolicy() {
        try {
            var obj = new ActiveXObject(DP.SdkAuthentication);

            var Policy = obj.ReadAuthPolicy();
            alert(AuthenticationPolicyToString(Policy));
        }
        catch (e) {
            alert(e.description || e.message);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This example demonstrates authentication of the currently logged on user.
    // We provide the caption (but not the prompt text) for the authentication dialog and receive the mask of
    // verified credentials. We also provide the authentication policy.
    // No secret is released to the application.

    // NOTE: It it not a good idea to attempt releasing a user secret when using a custom authentication policy, because
    // for secret release, the user must be verified with credentials contained in the authentication policy,
    // configured by the administrator, and it is not guaranteed that these credentials exist in the custom policy.
    function AuthenticateCurrentlyLoggedOnUserWithApplicationProvidedAuthenticationPolicy() {
        try {
            var obj = new ActiveXObject(DP.SdkAuthentication);

            obj.Title = "Altus SDK Sample";

            obj.AuthenticationPolicy.Clear();
            obj.AuthenticationPolicy.Add(DP.Credentials.Password | DP.Credentials.Fingerprint);
            obj.AuthenticationPolicy.Add(DP.Credentials.Pin | DP.Credentials.Bluetooth);
            obj.AuthenticationPolicy.Add(DP.Credentials.Contactless | DP.Credentials.Password);
            obj.AuthenticationPolicy.Add(DP.Credentials.Smartcard);

            if (obj.ShowDialog()) {
                var AuthenticatedCredentials = obj.AuthenticatedCredentials;
                alert("Authentication succeeded. \r" + AuthenticatedCredentialsToString(AuthenticatedCredentials));
            }
        }
        catch (e) {
            alert(e.description || e.message);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This example demonstrates authentication of the currently logged on user.
    // First, we retrieve the current authentication policy and add Bluetooth credential to every element of the policy
    // array, effectively making Bluetooth a "mandatory" credential.
    // Then we call funtion to authenticate the user, specifying the prompt text (but not the caption) for the authentication
    // dialog and receive the mask of verified  credentials.
    // The secret is released to the application, because this policy authenticates all the credentials required
    // for secret release, and, in addition (if it was not there originally), Bluetooth.
    function AuthenticateCurrentlyLoggedOnUserWithAuthenticationPolicyModifiedByApplication() {
        try {
            var obj = new ActiveXObject(DP.SdkAuthentication);

            var Policy = obj.ReadAuthPolicy();
            alert("Current Authentication Policy\r=============================" +
                    AuthenticationPolicyToString(Policy));

            // Modify the policy - add Bluetooth token to every element of the array
            for (var i = 0; i < Policy.Count; i++) {
                var policyItem = Policy.GetByIndex(i);
                policyItem |= DP.Credentials.Bluetooth;
                Policy.SetByIndex(i, policyItem);
            }

            obj.AuthenticationPolicy = Policy;

            alert("Modified Authentication Policy\r==============================" +
                    AuthenticationPolicyToString(obj.AuthenticationPolicy));

            obj.Description = "Authenticate for release of the secret";

            var SecretValue = obj.ShowDialogReadSecret(SecretName());
            if (SecretValue) {
                var AuthenticatedCredentials = obj.AuthenticatedCredentials;
                alert("Authentication succeeded. \r" + SecretName() + " = " + SecretValue +
                        AuthenticatedCredentialsToString(AuthenticatedCredentials));
            }
        }
        catch (e) {
            alert(e.description || e.message);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    // This example demonstrates identification of a user and with custom authentication policy.
    // We specify the prompt text, caption for the authentication dialog and
    // authentication policy. The authentication policy is actually empty by default. We specify a policy with "mandatory"
    // Bluetooth credential.
    //
    // The identification dialog shows no default user name.
    // The name of the identified and authenticated user and the mask of authenticated credentials are returned to the application.
    //
    // Note that with this approach a user secret may not necessary can be released, because the
    // modified authentication policy that we provide is based on the policy fop the currently logged on user,
    // and there is no quarantee that for the identified user the policy will be the same. So,
    // we pass NULLs for all secret parameters and do not expect any secret release.
    function IdentifyUserWithCustomAuthenticationPolicy() {
        try {
            var obj = new ActiveXObject(DP.SdkIdentification);

            obj.AuthenticationPolicy.Add(DP.Credentials.Password | DP.Credentials.Bluetooth);
            obj.AuthenticationPolicy.Add(DP.Credentials.Fingerprint | DP.Credentials.Bluetooth);
            obj.AuthenticationPolicy.Add(DP.Credentials.Contactless | DP.Credentials.Bluetooth);

            alert("Modified Authentication Policy\r==============================" +
                    AuthenticationPolicyToString(obj.AuthenticationPolicy));

            obj.Description = "Identifying user and getting a secret";

            var SecretValue = obj.ShowDialogReadSecret(SecretName());
            if (SecretValue) {
                var AuthenticatedCredentials = obj.AuthenticatedCredentials;
                alert("Authentication succeeded. \r" + SecretName() + " = " + SecretValue +
                        AuthenticatedCredentialsToString(AuthenticatedCredentials));
            }
        }
        catch (e) {
            alert(e.description || e.message);
        }
    }

</script>

</head>
<body>
    <div class="container">

        <div id="authentication" class="samples">
                <h2>Authentication</h2>
                <div class="sample">
                    <h3>Authenticate the currently logged on user</h3>
                    <button onclick="SimpleAuthenticateCurrentlyLoggedOnUser();">Execute</button>
                </div>

                <div class="sample">
                    <h3>Authenticate a user with modified parameters</h3>
                    <div class="sample-inputs">
                        <div class="sample-input">
                            <label for="authTitle">Title:</label>
                            <input id="authTitle" type="text" placeholder="Title" value="Altus SDK Sample"/>
                        </div>
                        <div class="sample-input">
                            <label for="authDescription">Description:</label>
                            <input id="authDescription" type="text" placeholder="Description" value="Authenticating user providing some parameters."/>
                        </div>
                    </div>

                    <button onclick="AuthenticateUserProvidingParameters(authTitle.value,authDescription.value);">Execute</button>
                </div>

                <div class="sample">
                    <h3>Authenticate the currently logged on user and retrieve a secret</h3>
                    <div class="sample-inputs">
                        <div class="sample-input">
                            <label for="authSecretName">Secret name:</label>
                            <input id="authSecretName" type="text" placeholder="Secret name" value="TopSecret"/>
                        </div>
                    </div>
                    <button onclick="GetSecretOfCurrentlyLoggedOnUser(authSecretName.value);">Execute</button>
                </div>

            </div>

        <div id="identification" class="samples">
                <h2>Identification</h2>
                <div class="sample">
                    <h3>Identify a user using the currently logged on username as the default</h3>
                    <button onclick="IdentifyUserUsingCurrentlyLoggedOnUserAsDefault();">Execute</button>
                </div>

                <div class="sample">
                    <h3>Identify a user using a specified default username</h3>
                    <div class="sample-inputs">
                        <div class="sample-input">
                            <label for="userName">Default user name:</label>
                            <input id="userName" type="text" placeholder="Default user name" value="SomeDefaultUser"/>
                        </div>
                        <div class="sample-input">
                            <label>Default user type:</label>
                            <div class="sample-radio-group">
                                <input type="radio" value="9" name="userType" checked /><span>Altus user</span>
                                <input type="radio" value="3" name="userType" /><span>Altus AD user</span>
                            </div>
                        </div>
                    </div>
                    <button onclick="IdentifyUserProvidingDefaultUserName(userName.value, selectedRadio('userType'));">Execute</button>
                </div>

                <div class="sample">
                    <h3>Identify a user and retrieve a secret</h3>
                    <div class="sample-inputs">
                        <div class="sample-input">
                            <label for="identifSecretName">Secret name:</label>
                            <input id="identifSecretName" type="text" placeholder="Secret name" value="TopSecret"/>
                        </div>
                    </div>
                    <button onclick="IdentifyUserAndGetUsersSecret(identifSecretName.value);">Execute</button>
                </div>
            </div>

        <div id="secrets" class="samples">
                <h2>Working with Secrets</h2>
                <div class="sample">
                    <h3>Write a secret for the currently logged on user</h3>
                    <div class="sample-inputs">
                        <div class="sample-input">
                            <label for="writeSecretName">Secret name:</label>
                            <input id="writeSecretName" type="text" placeholder="Secret name" value="TopSecret"/>
                        </div>
                        <div class="sample-input">
                            <label for="writeSecretValue">Secret value:</label>
                            <input id="writeSecretValue" type="text" placeholder="Secret value" value="123"/>
                        </div>
                    </div>
                    <button onclick="WriteSecretForCurrentlyLoggedOnUser(writeSecretName.value,writeSecretValue.value);">Execute</button>
                </div>

                <div class="sample">
                    <h3>Check if a secret exists</h3>
                    <div class="sample-inputs">
                        <div class="sample-input">
                            <label for="existSecretName">Secret name:</label>
                            <input id="existSecretName" type="text" placeholder="Secret name" value="TopSecret"/>
                        </div>
                    </div>
                    <button onclick="DoesSecretExist(existSecretName.value);">Execute</button>
                </div>

                <div class="sample">
                    <h3>Delete a secret</h3>
                    <div class="sample-inputs">
                        <div class="sample-input">
                            <label for="deleteSecretName">Secret name:</label>
                            <input id="deleteSecretName" type="text" placeholder="Secret name" value="TopSecret"/>
                        </div>
                    </div>
                    <button onclick="DeleteSecretForCurrentlyLoggedOnUser(deleteSecretName.value);">Execute</button>
                </div>
            </div>

        <div id="policies" class="samples">
                <h2>Custom Authentication Policies (Advanced)</h2>

                <div class="sample">
                    <h3>Show the authentication policy for the currently logged on user</h3>
                    <button onclick="ShowUserAuthenticationPolicy();">Execute</button>
                </div>

                <div class="sample">
                    <h3>Authenticate the currently logged on user using a custom policy that replaces the admin's policy</h3>
                    <button onclick="AuthenticateCurrentlyLoggedOnUserWithApplicationProvidedAuthenticationPolicy();">Execute</button>
                </div>

                <div class="sample">
                    <h3>Authenticate the currently logged on user using a custom policy that modifies the admin's policy</h3>
                    <button onclick="AuthenticateCurrentlyLoggedOnUserWithAuthenticationPolicyModifiedByApplication();">Execute</button>
                </div>

                <div class="sample">
                    <h3>Identify a user using a custom policy</h3>
                    <button onclick="IdentifyUserWithCustomAuthenticationPolicy();">Execute</button>
                </div>
            </div>

    </div>
</body>
</html>
